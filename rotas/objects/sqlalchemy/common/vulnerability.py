import graphene
from graphene_sqlalchemy import SQLAlchemyObjectType
from rotas.arepo.arepo.models.common.vulnerability import (VulnerabilityModel, VulnerabilityCWEModel, ReferenceModel,
                                                           ReferenceTagModel, TagModel)
from rotas.arepo.arepo.models.common.weakness import CWEModel
from rotas.arepo.arepo.models.git import CommitModel
from rotas.arepo.arepo.models.data import WeaknessModel

from rotas.objects.sqlalchemy.common.weakness import CWE
from rotas.objects.sqlalchemy.git import Commit
from rotas.objects.sqlalchemy.data import Weakness


class Tag(SQLAlchemyObjectType):
    class Meta:
        model = TagModel
        use_connection = True

    name = graphene.String()

    def resolve_name(self, info):
        return self.name


class Reference(SQLAlchemyObjectType):
    class Meta:
        model = ReferenceModel
        use_connection = True

    tags = graphene.List(lambda: Tag)

    def resolve_tags(self, info):
        tag_ids = ReferenceTag.get_query(info).filter(ReferenceTagModel.reference_id == self.id).all()
        return Tag.get_query(info).filter(TagModel.id.in_([tag.tag_id for tag in tag_ids])).all()


class ReferenceTag(SQLAlchemyObjectType):
    class Meta:
        model = ReferenceTagModel
        use_connection = True


class Vulnerability(SQLAlchemyObjectType):
    class Meta:
        model = VulnerabilityModel
        use_connection = True

    id = graphene.String()
    cwe_ids = graphene.List(lambda: CWE)
    references = graphene.List(lambda: Reference)
    commits = graphene.List(lambda: Commit)
    root_weakness = graphene.String()

    def resolve_id(self, info):
        return self.id

    def resolve_commits(self, info):
        commits_query = Commit.get_query(info=info)
        commits_query = commits_query.filter(CommitModel.vulnerability_id == self.id)

        return commits_query.all()

    def resolve_root_weakness(self, info):
        weakness = Weakness.get_query(info=info).filter(WeaknessModel.vulnerability_id == self.id).first()

        if weakness:
            return weakness.tuple

        return None

    def resolve_references(self, info):
        references_query = Reference.get_query(info=info)
        cwe_vuln_query = references_query.filter(ReferenceModel.vulnerability_id == self.id)

        return cwe_vuln_query.all()

    def resolve_cwe_ids(self, info):
        cwe_vuln_query = VulnerabilityCWE.get_query(info=info)
        cwe_vuln_query = cwe_vuln_query.filter(VulnerabilityCWEModel.vulnerability_id == self.id)

        cwe_ids = [cwe_vuln.cwe_id for cwe_vuln in cwe_vuln_query.all()]

        return CWE.get_query(info=info).filter(CWEModel.id.in_(cwe_ids)).all()


class VulnerabilityCWE(SQLAlchemyObjectType):
    class Meta:
        model = VulnerabilityCWEModel
        use_connection = True
